.Hero {
  --grid-template: var(--grid-template-basic);

  --hero-offset-height: 1;
  --hero-main-offset-height: 1;
  --hero-heading-offset-height: 0;
  --hero-offset-top: 0;
  --hero-offset: 0;

  --hero-main-space: var(--space-l);

  --hero-min-height: calc((250 / 16) * 1rem);
  --hero-max-height: calc((100dvh - var(--header-height)) * 0.618);

  --hero-height: clamp(
    var(--hero-min-height),
    calc(100dvw / 1.618),
    var(--hero-max-height)
  );

  --hero-visible: min(
    max(0, calc(-1 * (var(--hero-offset-top) - (var(--scroll-y))))),
    var(--hero-offset-height)
  );

  --hero-visible-ratio: calc((var(--hero-visible) / var(--hero-offset-height)));

  --hero-scale-ratio: calc(
    var(--hero-visible) /
      (var(--hero-offset-height) - (var(--hero-heading-offset-height)))
  );

  --hero-main-min-height: calc(var(--step-5) + (var(--hero-main-space) * 2));
  --hero-main-max-height: calc(
    var(--hero-max-height) + (var(--hero-main-space) * 2)
  );
  --hero-main-height: clamp(
    var(--hero-main-min-height),
    calc(100% * (1 - var(--hero-visible-ratio))),
    var(--hero-main-max-height)
  );

  --hero-font-size: clamp(
    var(--step-4),
    calc(
      var(--step-4) +
        ((var(--step-5) - var(--step-4)) * (1 - var(--hero-scale-ratio)))
    ),
    var(--step-5)
  );

  aspect-ratio: 1.618 / 1;
  align-items: start;
  block-size: var(--hero-height);
  container-name: hero;
  container-type: size;
  position: relative;
  min-block-size: var(--hero-min-height);
  max-block-size: var(--hero-max-height);

  &::before {
    background: oklch(var(--color-bg-default));
    background-image: repeating-conic-gradient(
        from calc(var(--hero-visible-ratio) * 20deg) at 0 100%,
        oklch(var(--color-bg-dark) / 1) 0 10deg,
        oklch(var(--color-bg-dark) / 0) 0 20deg
      ),
      linear-gradient(
        225deg,
        oklch(var(--color-bg-dark) / 0.5),
        oklch(var(--color-bg-dark) / 0)
      );
    block-size: 150%;
    display: block;
    content: '';
    position: absolute;
    top: 0;
    inline-size: 100%;
  }

  &::after {
    background: linear-gradient(
        to top,
        oklch(var(--color-bg-default) / 1),
        oklch(var(--color-bg-default) / 0)
      ),
      linear-gradient(
        to right,
        oklch(var(--color-bg-default) / 1),
        oklch(var(--color-bg-default) / 0)
      );
    block-size: 50%;
    display: block;
    content: '';
    position: absolute;
    top: 100%;
    inline-size: 100%;
  }
}

.Hero__main {
  align-items: center;
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  justify-items: start;
  block-size: var(--hero-main-height);
  inset-block-start: 0;
  min-block-size: var(--hero-main-min-height);
  max-block-size: var(--hero-main-max-height);
  padding-block: var(--hero-main-space);
  position: sticky;

  & > * {
    grid-column: 1 / 6;
    grid-row: 1;
    justify-self: start;
  }
}

.Hero__image {
  --opacity1: max(0, min(1, calc(1 - var(--hero-scale-ratio))));
  block-size: 100%;
  grid-column: 4 / 6;
  justify-self: center;
  opacity: var(--opacity2, var(--opacity1));
  overflow: hidden;
  padding-inline-start: var(--grid-column-gap);

  @container hero (inline-size > calc((600 / 16) * 1rem)) {
    grid-column: 3 / 6;
  }

  & img {
    aspect-ratio: 1 / 1;
    block-size: 100%;
    inline-size: 100%;
    margin: auto;
    object-fit: contain;
  }
}

@supports (width: calc(1px * pow(1, 1))) {
  .Hero__image {
    --opacity2: pow(var(--opacity1), 4);
  }
}

.Hero__heading {
  --color1: color-mix(
    in oklch,
    oklch(var(--color-secondary)) calc(100% * (1 - var(--hero-scale-ratio))),
    oklch(var(--color-text))
  );
  --color2: color-mix(
    in oklch,
    oklch(var(--color-primary)) calc(100% * (1 - var(--hero-scale-ratio))),
    oklch(var(--color-text))
  );
  background: linear-gradient(50deg, var(--color1), var(--color2));
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-size: var(--hero-font-size);
  margin: 0;
  transform-origin: 0 100%;
}

.Hero__intro {
  --opacity1: max(0, min(1, calc(1 - var(--hero-scale-ratio))));
  --font-size: var(--step-0);
  align-self: start;
  inset-block-start: 50%;
  grid-column: 1 / 4;
  margin-top: calc((var(--hero-font-size) / 2));
  opacity: var(--opacity2, var(--opacity1));
  position: absolute;
  text-wrap: balance;

  @container hero (inline-size > calc((600 / 16) * 1rem)) {
    grid-column: 1 / 3;
  }

  @container hero (block-size > calc((300 / 16) * 1rem)) {
    --font-size: var(--step-1);
  }
}

@supports (width: calc(1px * pow(1, 1))) {
  .Hero__intro {
    --opacity2: pow(var(--opacity1), 8);
  }
}
